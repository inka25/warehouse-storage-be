// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/stores/mysql/client.go

// Package mock_mysql is a generated GoMock package.
package mock_mysql

import (
	stores "InkaTry/warehouse-storage-be/internal/pkg/stores"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClienter is a mock of Clienter interface
type MockClienter struct {
	ctrl     *gomock.Controller
	recorder *MockClienterMockRecorder
}

// MockClienterMockRecorder is the mock recorder for MockClienter
type MockClienterMockRecorder struct {
	mock *MockClienter
}

// NewMockClienter creates a new mock instance
func NewMockClienter(ctrl *gomock.Controller) *MockClienter {
	mock := &MockClienter{ctrl: ctrl}
	mock.recorder = &MockClienterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClienter) EXPECT() *MockClienterMockRecorder {
	return m.recorder
}

// Autocomplete mocks base method
func (m *MockClienter) Autocomplete(ctx context.Context, prefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Autocomplete", ctx, prefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Autocomplete indicates an expected call of Autocomplete
func (mr *MockClienterMockRecorder) Autocomplete(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Autocomplete", reflect.TypeOf((*MockClienter)(nil).Autocomplete), ctx, prefix)
}

// GetProductByProductId mocks base method
func (m *MockClienter) GetProductByProductId(ctx context.Context, params *stores.SearchParams) (*stores.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByProductId", ctx, params)
	ret0, _ := ret[0].(*stores.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByProductId indicates an expected call of GetProductByProductId
func (mr *MockClienterMockRecorder) GetProductByProductId(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByProductId", reflect.TypeOf((*MockClienter)(nil).GetProductByProductId), ctx, params)
}

// ListWarehouses mocks base method
func (m *MockClienter) ListWarehouses(ctx context.Context) (stores.Results, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWarehouses", ctx)
	ret0, _ := ret[0].(stores.Results)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWarehouses indicates an expected call of ListWarehouses
func (mr *MockClienterMockRecorder) ListWarehouses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWarehouses", reflect.TypeOf((*MockClienter)(nil).ListWarehouses), ctx)
}

// ListProductTypes mocks base method
func (m *MockClienter) ListProductTypes(ctx context.Context) (stores.Results, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductTypes", ctx)
	ret0, _ := ret[0].(stores.Results)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductTypes indicates an expected call of ListProductTypes
func (mr *MockClienterMockRecorder) ListProductTypes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductTypes", reflect.TypeOf((*MockClienter)(nil).ListProductTypes), ctx)
}

// ListBrands mocks base method
func (m *MockClienter) ListBrands(ctx context.Context) (stores.Results, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBrands", ctx)
	ret0, _ := ret[0].(stores.Results)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBrands indicates an expected call of ListBrands
func (mr *MockClienterMockRecorder) ListBrands(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBrands", reflect.TypeOf((*MockClienter)(nil).ListBrands), ctx)
}

// ListCountries mocks base method
func (m *MockClienter) ListCountries(ctx context.Context) (stores.Results, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCountries", ctx)
	ret0, _ := ret[0].(stores.Results)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCountries indicates an expected call of ListCountries
func (mr *MockClienterMockRecorder) ListCountries(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCountries", reflect.TypeOf((*MockClienter)(nil).ListCountries), ctx)
}

// ListProducts mocks base method
func (m *MockClienter) ListProducts(ctx context.Context, p *stores.SearchParams) (stores.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, p)
	ret0, _ := ret[0].(stores.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts
func (mr *MockClienterMockRecorder) ListProducts(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockClienter)(nil).ListProducts), ctx, p)
}

// ListInventoriesByWarehouseId mocks base method
func (m *MockClienter) ListInventoriesByWarehouseId(ctx context.Context, p *stores.SearchParams) (stores.Inventories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInventoriesByWarehouseId", ctx, p)
	ret0, _ := ret[0].(stores.Inventories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInventoriesByWarehouseId indicates an expected call of ListInventoriesByWarehouseId
func (mr *MockClienterMockRecorder) ListInventoriesByWarehouseId(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInventoriesByWarehouseId", reflect.TypeOf((*MockClienter)(nil).ListInventoriesByWarehouseId), ctx, p)
}

// ListInventoriesByProductId mocks base method
func (m *MockClienter) ListInventoriesByProductId(ctx context.Context, p *stores.SearchParams) (stores.Inventories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInventoriesByProductId", ctx, p)
	ret0, _ := ret[0].(stores.Inventories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInventoriesByProductId indicates an expected call of ListInventoriesByProductId
func (mr *MockClienterMockRecorder) ListInventoriesByProductId(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInventoriesByProductId", reflect.TypeOf((*MockClienter)(nil).ListInventoriesByProductId), ctx, p)
}

// ListHistoriesByProductId mocks base method
func (m *MockClienter) ListHistoriesByProductId(ctx context.Context, p *stores.SearchParams) (stores.Histories, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListHistoriesByProductId", ctx, p)
	ret0, _ := ret[0].(stores.Histories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListHistoriesByProductId indicates an expected call of ListHistoriesByProductId
func (mr *MockClienterMockRecorder) ListHistoriesByProductId(ctx, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListHistoriesByProductId", reflect.TypeOf((*MockClienter)(nil).ListHistoriesByProductId), ctx, p)
}
